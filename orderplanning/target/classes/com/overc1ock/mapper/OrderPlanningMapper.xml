<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.overc1ock.mapper.OrderPlanningMapper">
	
	<!-- 품목 정보 목록 출력 -->
	<select id="getItemInfo" resultType="com.overc1ock.domain.ItemInfoVO">
		select item_code, item_name, sc_name, mc_name, standard, material, specification_file, draw_file, item_registration_date
		from item join sub_category using(sc_code) join major_category using(mc_code)
		order by item_code, item_registration_date
	</select>
	
	<!-- 대분류 가져오기 -->
	<select id="getMajorCategory" resultType="com.overc1ock.domain.ItemInfoVO">
		SELECT mc_code, mc_name
		FROM major_category
		ORDER BY mc_code
	</select>
	
	<!-- 중분류 가져오기 -->
	<select id="getSubCategory" resultType="com.overc1ock.domain.ItemInfoVO">
		SELECT sc_code, sc_name
		FROM sub_category
		where mc_code = #{mc_code}
		ORDER BY sc_code
	</select>
	
	<!-- 대분류 이름 가져오기 -->
	<select id="getMc_name" resultType="com.overc1ock.domain.ItemInfoVO">
		select mc_name from major_category where mc_code=#{mc_code}
	</select>
	
	<!-- 중분류 이름 가져오기 -->
	<select id="getSc_name" resultType="com.overc1ock.domain.ItemInfoVO">
		select sc_name from sub_category where sc_code=#{sc_code}
	</select>
	
	<!-- 품목코드 조회 -->
	<select id="getItemCode" resultType="com.overc1ock.domain.ItemInfoVO">
		select ifnull(max(item_code),0) item_code from item where item_code like concat('%',#{itemCode},'%')
	</select>
	
	<!-- 품목 정보 등록 -->
	<insert id="registerItemInfo">
		INSERT INTO item (item_code, item_name, standard, material, specification_file, draw_file, sc_code)
		VALUES (#{item_code},#{ item_name }, #{ standard }, #{ material }, #{ specification_file }, #{ draw_file }, #{ sc_code })
	</insert>
	
	<!-- 품목 정보 조회 -->
	<select id="inquiryItemInfo" resultType="com.overc1ock.domain.ItemInfoVO">
		SELECT item_code, item_name, standard, material, specification_file, draw_file, item_registration_date, sc_code
		FROM item JOIN sub_category USING(sc_code) JOIN major_category USING(mc_code)
		WHERE item_code = #{ item_code }
	</select>
	
	<!-- 품목 정보 삭제 -->
	<delete id="deleteItemInfo">
		DELETE FROM item WHERE item_code = #{ item_code }
	</delete>
	
	<!-- 품목 정보 수정 -->
	<update id="modifyItemInfo">
		UPDATE item
		SET item_name = #{item_name}, standard = #{ standard }, material = #{ material },
		specification_file = #{ specification_file }, draw_file = #{ draw_file }, sc_code = #{ sc_code }, mc_code = #{mc_code} WHERE item_code = #{ item_code };
	</update>
	
	<!-- 계약 품목 정보 목록 출력 -->
	<select id="getContract" resultType="com.overc1ock.domain.ContractVO">
		SELECT contract_code, contract_name, item_code, item_name, subcontractor_name, agreement_date, leadtime, supply_price
		FROM contract JOIN item USING(item_code)
		ORDER BY agreement_date DESC, item_code
	</select>
	
	<!-- 품목 코드 가져오기 -->
	<select id="getItemCodeForContract" resultType="com.overc1ock.domain.ContractVO">
		select item_code from item order by item_code
	</select>
	
	<!-- 품목 코드로 선택된 품목 정보 가져오기  -->
	<select id="getItemInfoForContract" resultType="com.overc1ock.domain.ContractVO">
		SELECT item_name, standard, material, specification_file, draw_file, sc_name, mc_name
		FROM item join sub_category using(sc_code) join major_category using(mc_code)
		WHERE item_code = #{ item_code }
	</select>
	
	<!-- 협력 업체명 가져오기 -->
	<select id="getSubcontractorName" resultType="com.overc1ock.domain.ContractVO">
		SELECT subcontractor_name
		FROM subcontractor
		ORDER by subcontractor_name
	</select>
	
	<!-- 협력 업체명으로 선택된 협력 업체 정보 가져오기 -->
	<select id="getSubcontractor" resultType="com.overc1ock.domain.ContractVO">
		SELECT subcontractor_tel, subcontractor_email, subcontractor_person
		FROM subcontractor
		WHERE subcontractor_name = #{ subcontractor_name }
	</select>
	
	<!-- 계약 등록 -->
	<insert id="registerContract">
		INSERT INTO 
		contract (contract_name, subcontractor_name, item_code, supply_price, agreement_date, leadtime, contract_file, contract_text)
		VALUES (#{ contract_name }, #{ subcontractor_name }, #{ item_code }, #{ supply_price }, #{ agreement_date }, #{ leadtime }, #{ contract_file }, #{ contract_text })
	</insert>
	
	<!-- 계약 조회 -->
	<select id="inquiryContract" resultType="com.overc1ock.domain.ContractVO">
		SELECT contract_code, contract_name, item_code, item_name, standard, material, specification_file, draw_file, sc_name, mc_name, subcontractor_name, subcontractor_tel, subcontractor_email, subcontractor_person, agreement_date, leadtime, supply_price, contract_file, contract_text
		FROM contract JOIN item USING(item_code) join subcontractor using(subcontractor_name) join sub_category using(sc_code) join major_category using(mc_code) 
		WHERE contract_code = #{ contract_code }
	</select>
	
	<!-- 계약 삭제 -->
	<delete id="deleteContract">
		DELETE FROM contract WHERE contract_code = #{ contract_code }
	</delete>
	
	<!-- 계약 수정 -->
	<update id="modifyContract">
		UPDATE contract
		SET contract_name = #{ contract_name }, subcontractor_name = #{ subcontractor_name }, item_code = #{ item_code },
		supply_price = #{ supply_price }, agreement_date = #{ agreement_date }, leadtime = #{ leadtime }, contract_text = #{ contract_text } 
		<if test="contract_file != null and contract_file != ''">
			,contract_file = #{ contract_file } 
		</if>
		 WHERE contract_code = #{ contract_code }
	</update>
	
	<!-- 조달 예정 품목 목록 출력 -->
	<select id="getProcurementPlan" resultType="com.overc1ock.domain.ProcurementPlanVO">
		select pp_code,item_code,item_name,`process`,consumption,production_date,procurement_date,pp_text, iup_code 
		from products_production_plan join item_use_plan using(ppp_code) join item using(item_code) left join procurement_plan using(iup_code) 
		where (pp_status is null or pp_status = 0)
			<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
		    	AND production_date between date(#{startDate}) and date(#{endDate})+1
			</if>
			<if test="word != null and word != ''">
		    	AND item_name like concat('%',#{word},'%')
			</if>
		
		ORDER BY procurement_date,production_date, item_code
	</select>
	
	<!-- 조달 계획 등록 -->
	<insert id="registerProcurementPlan" parameterType="java.util.List">
    	<foreach collection="list" item="vo" separator=";">
	    	insert into procurement_plan(procurement_date,pp_text,iup_code)
	    	values(#{vo.procurement_date},#{vo.pp_text},#{vo.iup_code})
    	</foreach>
    </insert>
    
</mapper>